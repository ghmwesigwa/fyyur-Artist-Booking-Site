[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Formatter",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "dateutil.parser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dateutil.parser",
        "description": "dateutil.parser",
        "detail": "dateutil.parser",
        "documentation": {}
    },
    {
        "label": "dates",
        "importPath": "babel",
        "description": "babel",
        "isExtraImport": true,
        "detail": "babel",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "Moment",
        "importPath": "flask_moment",
        "description": "flask_moment",
        "isExtraImport": true,
        "detail": "flask_moment",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URI",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ArtistForm",
        "importPath": "forms",
        "description": "forms",
        "isExtraImport": true,
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "ShowForm",
        "importPath": "forms",
        "description": "forms",
        "isExtraImport": true,
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "VenueForm",
        "importPath": "forms",
        "description": "forms",
        "isExtraImport": true,
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "forms",
        "description": "forms",
        "isExtraImport": true,
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "getUtility",
        "importPath": "get_utility",
        "description": "get_utility",
        "isExtraImport": true,
        "detail": "get_utility",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "confirm",
        "importPath": "fabric.contrib.console",
        "description": "fabric.contrib.console",
        "isExtraImport": true,
        "detail": "fabric.contrib.console",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectMultipleField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "AnyOf",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.e34be39c1e4c_",
        "description": "migrations.versions.e34be39c1e4c_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('artists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.Column('genres', sa.ARRAY(sa.String()), server_default='{}', nullable=True),\n    sa.Column('city', sa.String(length=128), nullable=True),\n    sa.Column('state', sa.String(length=128), nullable=True),\n    sa.Column('phone', sa.String(length=128), nullable=True),\n    sa.Column('facebook_link', sa.String(length=128), nullable=True),",
        "detail": "migrations.versions.e34be39c1e4c_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.e34be39c1e4c_",
        "description": "migrations.versions.e34be39c1e4c_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('shows')\n    op.drop_table('venues')\n    op.drop_table('artists')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.e34be39c1e4c_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.e34be39c1e4c_",
        "description": "migrations.versions.e34be39c1e4c_",
        "peekOfCode": "revision = 'e34be39c1e4c'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('artists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.Column('genres', sa.ARRAY(sa.String()), server_default='{}', nullable=True),",
        "detail": "migrations.versions.e34be39c1e4c_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.e34be39c1e4c_",
        "description": "migrations.versions.e34be39c1e4c_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('artists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.Column('genres', sa.ARRAY(sa.String()), server_default='{}', nullable=True),\n    sa.Column('city', sa.String(length=128), nullable=True),",
        "detail": "migrations.versions.e34be39c1e4c_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.e34be39c1e4c_",
        "description": "migrations.versions.e34be39c1e4c_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('artists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.Column('genres', sa.ARRAY(sa.String()), server_default='{}', nullable=True),\n    sa.Column('city', sa.String(length=128), nullable=True),\n    sa.Column('state', sa.String(length=128), nullable=True),",
        "detail": "migrations.versions.e34be39c1e4c_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.e34be39c1e4c_",
        "description": "migrations.versions.e34be39c1e4c_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('artists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.Column('genres', sa.ARRAY(sa.String()), server_default='{}', nullable=True),\n    sa.Column('city', sa.String(length=128), nullable=True),\n    sa.Column('state', sa.String(length=128), nullable=True),\n    sa.Column('phone', sa.String(length=128), nullable=True),",
        "detail": "migrations.versions.e34be39c1e4c_",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nconfig.set_main_option(",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nconfig.set_main_option(\n    'sqlalchemy.url',\n    str(current_app.extensions['migrate'].db.get_engine().url).replace(\n        '%', '%%'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = current_app.extensions['migrate'].db.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "Venue",
        "kind": 6,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "class Venue(db.Model):\n    __tablename__ = \"venues\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    genres = db.Column(db.ARRAY(db.String), server_default=\"{}\")\n    address = db.Column(db.String(128))\n    city = db.Column(db.String(128))\n    state = db.Column(db.String(128))\n    phone = db.Column(db.String(128))\n    website = db.Column(db.String)",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "Artist",
        "kind": 6,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "class Artist(db.Model):\n    __tablename__ = \"artists\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    genres = db.Column(db.ARRAY(db.String), server_default=\"{}\")\n    city = db.Column(db.String(128))\n    state = db.Column(db.String(128))\n    phone = db.Column(db.String(128))\n    facebook_link = db.Column(db.String(128))\n    seeking_venue = db.Column(db.Boolean, default=False)",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "Show",
        "kind": 6,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "class Show(db.Model):\n    __tablename__ = \"shows\"\n    id = db.Column(db.Integer, primary_key=True)\n    venue_id = db.Column(db.Integer, db.ForeignKey(\"venues.id\"), nullable=False)\n    start_time = db.Column(db.DateTime, default=datetime.utcnow)\n    artist_id = db.Column(db.Integer, db.ForeignKey(\"artists.id\"), nullable=False)\n    def __repr__(self):\n        return f\"<Show id: {self.id}; start_time: {self.start_time}>\"\n#----------------------------------------------------------------------------\n# End",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "db = SQLAlchemy()\n# Venue Model\n#----------------------------------------------------------------------------\nclass Venue(db.Model):\n    __tablename__ = \"venues\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    genres = db.Column(db.ARRAY(db.String), server_default=\"{}\")\n    address = db.Column(db.String(128))\n    city = db.Column(db.String(128))",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def format_datetime(value, date_format=\"medium\"):\n    date = dateutil.parser.parse(value)\n    if date_format == \"full\":\n        date_format = \"EEEE MMMM, d, y 'at' h:mma\"\n    elif date_format == \"medium\":\n        date_format = \"EE MM, dd, y h:mma\"\n    return dates.format_datetime(date, date_format, locale=\"en\")\napp.jinja_env.filters[\"datetime\"] = format_datetime\n# ----------------------------------------------------------------------------#\n# Controllers.",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return render_template(\"pages/home.html\")\n# ----------------------------------------------------------------------------#\n#  Venues\n# ----------------------------------------------------------------------------#\n@app.route(\"/venues\")\ndef venues():\n    upcoming_shows = get_utility.get_shows(\"future\")\n    data = [{\n        \"city\": venue.city,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "venues",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def venues():\n    upcoming_shows = get_utility.get_shows(\"future\")\n    data = [{\n        \"city\": venue.city,\n        \"state\": venue.state,\n        \"venues\": [{\n            \"id\": venue.id,\n            \"name\": venue.name,\n            \"num_upcoming_shows\": [show.venue_id for show in upcoming_shows].count(venue.id)\n        } for venue in Venue.query.filter(Venue.city == venue.city)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "search_venues",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def search_venues():\n    pattern = request.form.get(\"search_term\", default=\"\")\n    results = get_utility.search(entity=\"venues\", pattern=pattern)\n    response = {\n        \"count\": len(results),\n        \"data\": [{\n            \"id\": venue.id,\n            \"name\": venue.name,\n            \"num_upcoming_shows\": len(get_utility.get_shows_for_venue(venue.id, \"future\"))\n        } for venue in results]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "show_venue",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def show_venue(venue_id):\n    venue = Venue.query.get(venue_id)\n    if not venue:\n        abort(404)\n    past_venue_shows = get_utility.get_shows_for_venue(venue_id, \"past\")\n    upcoming_venue_shows = get_utility.get_shows_for_venue(venue_id, \"future\")\n    past_shows = [{\n        \"artist_id\": show.artist_id,\n        \"artist_name\": show.artists.name,\n        \"artist_image_link\": show.artists.image_link,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_venue_form",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_venue_form():\n    form = VenueForm()\n    return render_template(\"forms/new_venue.html\", form=form)\n@app.route(\"/venues/create\", methods=[\"POST\"])\ndef create_venue_submission():\n    venue = Venue()\n    get_utility.handle_submission(venue, \"insert\")\n    return redirect(url_for(\"index\"))\n@app.route(\"/venues/<venue_id>\", methods=[\"DELETE\"])\ndef delete_venue(venue_id):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_venue_submission",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_venue_submission():\n    venue = Venue()\n    get_utility.handle_submission(venue, \"insert\")\n    return redirect(url_for(\"index\"))\n@app.route(\"/venues/<venue_id>\", methods=[\"DELETE\"])\ndef delete_venue(venue_id):\n    venue = Venue.query.get(venue_id)\n    try:\n        db.session.delete(venue)\n        db.session.commit()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "delete_venue",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete_venue(venue_id):\n    venue = Venue.query.get(venue_id)\n    try:\n        db.session.delete(venue)\n        db.session.commit()\n    except Exception as e:\n        logging.error(e)\n        db.session.rollback()\n    finally:\n        db.session.close()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "artists",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def artists():\n    data = [{\"id\": artist.id, \"name\": artist.name} for artist in Artist.query.all()]\n    return render_template(\"pages/artists.html\", artists=data)\n@app.route(\"/artists/search\", methods=[\"POST\"])\ndef search_artists():\n    pattern = request.form.get(\"search_term\", default=\"\")\n    results = get_utility.search(entity=\"artists\", pattern=pattern)\n    response = {\n        \"count\": len(results),\n        \"data\": [{",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "search_artists",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def search_artists():\n    pattern = request.form.get(\"search_term\", default=\"\")\n    results = get_utility.search(entity=\"artists\", pattern=pattern)\n    response = {\n        \"count\": len(results),\n        \"data\": [{\n            \"id\": artist.id,\n            \"name\": artist.name,\n            \"num_upcoming_shows\": get_utility.get_shows_for_artist(artist.id, \"future\"),\n        } for artist in results]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "show_artist",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def show_artist(artist_id):\n    # shows the artist page with the given artist_id\n    artist_past_shows = get_utility.get_shows_for_artist(artist_id, \"past\")\n    artist_upcoming_shows = get_utility.get_shows_for_artist(artist_id, \"future\")\n    past_shows = [{\n        \"venue_id\": show.venue_id,\n        \"venue_name\": show.venues.name,\n        \"venue_image_link\": show.venues.image_link,\n        \"start_time\": str(show.start_time),\n    } for show in artist_past_shows]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "edit_artist",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def edit_artist(artist_id):\n    form = ArtistForm()\n    artist = Artist.query.get(artist_id)\n    data = {\"id\": artist.id, \"name\": artist.name}\n    return render_template(\"forms/edit_artist.html\", form=form, artist=data)\n@app.route(\"/artists/<int:artist_id>/edit\", methods=[\"POST\"])\ndef edit_artist_submission(artist_id):\n    artist = Artist()\n    get_utility.handle_submission(artist, operation=\"update\", entity_id=artist_id)\n    return redirect(url_for(\"show_artist\", artist_id=artist_id))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "edit_artist_submission",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def edit_artist_submission(artist_id):\n    artist = Artist()\n    get_utility.handle_submission(artist, operation=\"update\", entity_id=artist_id)\n    return redirect(url_for(\"show_artist\", artist_id=artist_id))\n@app.route(\"/venues/<int:venue_id>/edit\", methods=[\"GET\"])\ndef edit_venue(venue_id):\n    form = VenueForm()\n    venue = Venue.query.get(venue_id)\n    data = {\n        \"id\": venue.id,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "edit_venue",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def edit_venue(venue_id):\n    form = VenueForm()\n    venue = Venue.query.get(venue_id)\n    data = {\n        \"id\": venue.id,\n        \"name\": venue.name,\n        \"genres\": venue.genres,\n        \"address\": venue.address,\n        \"city\": venue.city,\n        \"state\": venue.state,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "edit_venue_submission",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def edit_venue_submission(venue_id):\n    venue = Venue()\n    get_utility.handle_submission(venue, operation=\"update\", entity_id=venue_id)\n    return redirect(url_for(\"show_venue\", venue_id=venue_id))\n# ----------------------------------------------------------------------------#\n#  Create Artist\n# ----------------------------------------------------------------------------#\n@app.route(\"/artists/create\", methods=[\"GET\"])\ndef create_artist_form():\n    form = ArtistForm()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_artist_form",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_artist_form():\n    form = ArtistForm()\n    return render_template(\"forms/new_artist.html\", form=form)\n@app.route(\"/artists/create\", methods=[\"POST\"])\ndef create_artist_submission():\n    artist = Artist()\n    get_utility.handle_submission(artist, \"insert\")\n    return redirect(url_for(\"index\"))\n# ----------------------------------------------------------------------------#\n#  Shows",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_artist_submission",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_artist_submission():\n    artist = Artist()\n    get_utility.handle_submission(artist, \"insert\")\n    return redirect(url_for(\"index\"))\n# ----------------------------------------------------------------------------#\n#  Shows\n# ----------------------------------------------------------------------------#\n@app.route(\"/shows\")\ndef shows():\n    # displays list of shows at /shows",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "shows",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def shows():\n    # displays list of shows at /shows\n    shows_data = [{\n        \"venue_id\": show.venue_id,\n        \"venue_name\": show.venues.name,\n        \"artist_id\": show.artists.id,\n        \"artist_name\": show.artists.name,\n        \"artist_image_link\": show.artists.image_link,\n        \"start_time\": str(show.start_time)}\n        for show in Show.query.all()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_shows",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_shows():\n    # renders form. do not touch.\n    form = ShowForm()\n    return render_template(\"forms/new_show.html\", form=form)\n@app.route(\"/shows/create\", methods=[\"POST\"])\ndef create_show_submission():\n    show = Show()\n    get_utility.handle_submission(show, \"insert\")\n    return redirect(url_for(\"index\"))\n@app.errorhandler(404)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_show_submission",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_show_submission():\n    show = Show()\n    get_utility.handle_submission(show, \"insert\")\n    return redirect(url_for(\"index\"))\n@app.errorhandler(404)\ndef not_found_error(error):\n    logging.error(error)\n    return render_template(\"errors/404.html\"), 404\n@app.errorhandler(500)\ndef server_error(error):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "not_found_error",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def not_found_error(error):\n    logging.error(error)\n    return render_template(\"errors/404.html\"), 404\n@app.errorhandler(500)\ndef server_error(error):\n    logging.error(error)\n    return render_template(\"errors/500.html\"), 500\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setFormatter(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "server_error",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def server_error(error):\n    logging.error(error)\n    return render_template(\"errors/500.html\"), 500\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setFormatter(\n        Formatter(\"%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]\")\n    )\n    app.logger.setLevel(logging.INFO)\n    file_handler.setLevel(logging.INFO)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__, template_folder=\"./templates\")\napp.config.from_object(\"config\")\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = SQLALCHEMY_DATABASE_URI\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\ndb.init_app(app)\nmigrate = Migrate(app, db)\nmoment = Moment(app)\nget_utility = getUtility()\n# ----------------------------------------------------------------------------#\n# Filters.",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = SQLALCHEMY_DATABASE_URI\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\ndb.init_app(app)\nmigrate = Migrate(app, db)\nmoment = Moment(app)\nget_utility = getUtility()\n# ----------------------------------------------------------------------------#\n# Filters.\n# ----------------------------------------------------------------------------#\ndef format_datetime(value, date_format=\"medium\"):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\ndb.init_app(app)\nmigrate = Migrate(app, db)\nmoment = Moment(app)\nget_utility = getUtility()\n# ----------------------------------------------------------------------------#\n# Filters.\n# ----------------------------------------------------------------------------#\ndef format_datetime(value, date_format=\"medium\"):\n    date = dateutil.parser.parse(value)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "migrate = Migrate(app, db)\nmoment = Moment(app)\nget_utility = getUtility()\n# ----------------------------------------------------------------------------#\n# Filters.\n# ----------------------------------------------------------------------------#\ndef format_datetime(value, date_format=\"medium\"):\n    date = dateutil.parser.parse(value)\n    if date_format == \"full\":\n        date_format = \"EEEE MMMM, d, y 'at' h:mma\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "moment",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "moment = Moment(app)\nget_utility = getUtility()\n# ----------------------------------------------------------------------------#\n# Filters.\n# ----------------------------------------------------------------------------#\ndef format_datetime(value, date_format=\"medium\"):\n    date = dateutil.parser.parse(value)\n    if date_format == \"full\":\n        date_format = \"EEEE MMMM, d, y 'at' h:mma\"\n    elif date_format == \"medium\":",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_utility",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "get_utility = getUtility()\n# ----------------------------------------------------------------------------#\n# Filters.\n# ----------------------------------------------------------------------------#\ndef format_datetime(value, date_format=\"medium\"):\n    date = dateutil.parser.parse(value)\n    if date_format == \"full\":\n        date_format = \"EEEE MMMM, d, y 'at' h:mma\"\n    elif date_format == \"medium\":\n        date_format = \"EE MM, dd, y h:mma\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.jinja_env.filters[\"datetime\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.jinja_env.filters[\"datetime\"] = format_datetime\n# ----------------------------------------------------------------------------#\n# Controllers.\n# ----------------------------------------------------------------------------#\n@app.route(\"/\")\ndef index():\n    return render_template(\"pages/home.html\")\n# ----------------------------------------------------------------------------#\n#  Venues\n# ----------------------------------------------------------------------------#",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SECRET_KEY = os.urandom(32)\n# Grabs the folder where the script runs.\nbasedir = os.path.abspath(os.path.dirname(__file__))\n# Enable debug mode.\nDEBUG = True\n# Connect to the database\n# TODO IMPLEMENT DATABASE URL\nSQLALCHEMY_DATABASE_URI = 'postgresql://postgres:abc123@localhost:5432/fyyur'\nSQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "basedir",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "basedir = os.path.abspath(os.path.dirname(__file__))\n# Enable debug mode.\nDEBUG = True\n# Connect to the database\n# TODO IMPLEMENT DATABASE URL\nSQLALCHEMY_DATABASE_URI = 'postgresql://postgres:abc123@localhost:5432/fyyur'\nSQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "DEBUG = True\n# Connect to the database\n# TODO IMPLEMENT DATABASE URL\nSQLALCHEMY_DATABASE_URI = 'postgresql://postgres:abc123@localhost:5432/fyyur'\nSQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URI",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:abc123@localhost:5432/fyyur'\nSQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_TRACK_MODIFICATIONS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def test():\n    with settings(warn_only=True):\n        result = local(\n            \"python test_tasks.py -v && python test_users.py -v\", capture=True\n        )\n    if result.failed and not confirm(\"Tests failed. Continue?\"):\n        abort(\"Aborted at user request.\")\ndef commit():\n    message = raw_input(\"Enter a git commit message: \")\n    local(\"git add . && git commit -am '{}'\".format(message))",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "commit",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def commit():\n    message = raw_input(\"Enter a git commit message: \")\n    local(\"git add . && git commit -am '{}'\".format(message))\ndef push():\n    local(\"git push origin master\")\ndef prepare():\n    test()\n    commit()\n    push()\n# deploy to heroku",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "push",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def push():\n    local(\"git push origin master\")\ndef prepare():\n    test()\n    commit()\n    push()\n# deploy to heroku\ndef pull():\n    local(\"git pull origin master\")\ndef heroku():",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "prepare",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def prepare():\n    test()\n    commit()\n    push()\n# deploy to heroku\ndef pull():\n    local(\"git pull origin master\")\ndef heroku():\n    local(\"git push heroku master\")\ndef heroku_test():",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "pull",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def pull():\n    local(\"git pull origin master\")\ndef heroku():\n    local(\"git push heroku master\")\ndef heroku_test():\n    local(\n        \"heroku run python test_tasks.py -v && heroku run python test_users.py -v\"\n    )\ndef deploy():\n    pull()",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "heroku",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def heroku():\n    local(\"git push heroku master\")\ndef heroku_test():\n    local(\n        \"heroku run python test_tasks.py -v && heroku run python test_users.py -v\"\n    )\ndef deploy():\n    pull()\n    test()\n    commit()",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "heroku_test",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def heroku_test():\n    local(\n        \"heroku run python test_tasks.py -v && heroku run python test_users.py -v\"\n    )\ndef deploy():\n    pull()\n    test()\n    commit()\n    heroku()\n    heroku_test()",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "deploy",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def deploy():\n    pull()\n    test()\n    commit()\n    heroku()\n    heroku_test()\n# rollback\ndef rollback():\n    local(\"heroku rollback\")",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "def rollback():\n    local(\"heroku rollback\")",
        "detail": "fabfile",
        "documentation": {}
    },
    {
        "label": "ArtistForm",
        "kind": 6,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "class ArtistForm(FlaskForm):\n    name = StringField(\n        'name', validators=[DataRequired()]\n    )\n    city = StringField(\n        'city', validators=[DataRequired()]\n    )\n    state = SelectField(\n        'state', validators=[DataRequired()],\n        choices=states_list",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "ShowForm",
        "kind": 6,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "class ShowForm(FlaskForm):\n    artist_id = StringField(\n        'artist_id'\n    )\n    venue_id = StringField(\n        'venue_id'\n    )\n    start_time = DateTimeField(\n        'start_time',\n        validators=[DataRequired()],",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "VenueForm",
        "kind": 6,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "class VenueForm(FlaskForm):\n    name = StringField(\n        'name', validators=[DataRequired()]\n    )\n    city = StringField(\n        'city', validators=[DataRequired()]\n    )\n    state = SelectField(\n        'state', validators=[DataRequired()],\n        choices=states_list",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "states_list",
        "kind": 5,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "states_list = [\n    ('AL', 'AL'),\n    ('AK', 'AK'),\n    ('AZ', 'AZ'),\n    ('AR', 'AR'),\n    ('CA', 'CA'),\n    ('CO', 'CO'),\n    ('CT', 'CT'),\n    ('DE', 'DE'),\n    ('DC', 'DC'),",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "genres_list",
        "kind": 5,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "genres_list = [\n    ('Alternative', 'Alternative'),\n    ('Blues', 'Blues'),\n    ('Classical', 'Classical'),\n    ('Country', 'Country'),\n    ('Electronic', 'Electronic'),\n    ('Folk', 'Folk'),\n    ('Funk', 'Funk'),\n    ('Hip-Hop', 'Hip-Hop'),\n    ('Heavy Metal', 'Heavy Metal'),",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "getUtility",
        "kind": 6,
        "importPath": "get_utility",
        "description": "get_utility",
        "peekOfCode": "class getUtility:\n    def get_shows(self, interval=\"all\", entity=\"show\", entity_id=None):\n        all_shows = db.session.query(Show)\n        if interval == \"all\" or entity in [None, \"show\"] or not entity_id:\n            return all_shows.all()\n        time_expr = Show.start_time < datetime.now() if interval == \"past\" else Show.start_time > datetime.now()\n        entity_filter = Show.artist_id if entity == \"artist\" else Show.venue_id\n        return all_shows \\\n            .join(Venue) \\\n            .filter(entity_filter == entity_id) \\",
        "detail": "get_utility",
        "documentation": {}
    }
]